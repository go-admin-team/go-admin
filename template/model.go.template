package models

import (
orm "go-admin/database"
"go-admin/tools"
_ "time"
)

type {{.ClassName}} struct {
{{ range .Columns -}}
    {{$x := .Pk}}
    {{if ($x)}}{{.GoField}} {{.GoType}} `json:"{{.JsonField}}" gorm:"type:{{.ColumnType}};primary_key"`{{else}}{{.GoField}} {{.GoType}} `json:"{{.JsonField}}" gorm:"type:{{.ColumnType}};"`{{end}} // {{.ColumnComment}}
{{- end }}
    DataScope   string `json:"dataScope" gorm:"-"`
    Params      string `json:"params"  gorm:"-"`
    BaseModel
}

func ({{.ClassName}}) TableName() string {
    return "{{.TBName}}"
}

// 创建{{.ClassName}}
func (e *{{.ClassName}}) Create() ({{.ClassName}}, error) {
    var doc {{.ClassName}}
    result := orm.Eloquent.Table(e.TableName()).Create(&e)
    if result.Error != nil {
        err := result.Error
        return doc, err
    }
    doc = *e
    return doc, nil
}


// 获取{{.ClassName}}
func (e *{{.ClassName}}) Get() ({{.ClassName}}, error) {
var doc {{.ClassName}}
    table := orm.Eloquent.Table(e.TableName())
    {{ range .Columns -}}
    {{$z := .IsQuery}}
    {{- if ($z) -}}
        if e.{{.GoField}} !=  "" {
        table = table.Where("{{.ColumnName}} = ?", e.{{.GoField}})
        }
    {{ end -}}
{{ end }}

if err := table.First(&doc).Error; err != nil {
return doc, err
}
return doc, nil
}

// 获取{{.ClassName}}带分页
func (e *{{.ClassName}}) GetPage(pageSize int, pageIndex int) ([]{{.ClassName}}, int, error) {
    var doc []{{.ClassName}}

    table := orm.Eloquent.Select("*").Table(e.TableName())
    {{ range .Columns -}}
    {{$z := .IsQuery}}
    {{- if ($z) -}}
        if e.{{.GoField}} != "" {
        table = table.Where("{{.ColumnName}} = ?", e.{{.GoField}})
        }
    {{ end -}}
    {{ end }}

    // 数据权限控制(如果不需要数据权限请将此处去掉)
    dataPermission := new(DataPermission)
    dataPermission.UserId, _ = tools.StringToInt(e.DataScope)
    table = dataPermission.GetDataScope(e.TableName(), table)

    var count int

    if err := table.Offset((pageIndex - 1) * pageSize).Limit(pageSize).Find(&doc).Error; err != nil {
        return nil, 0, err
    }
    table.Count(&count)
    return doc, count, nil
}

// 更新{{.ClassName}}
func (e *{{.ClassName}}) Update(id int) (update {{.ClassName}}, err error) {
    if err = orm.Eloquent.Table(e.TableName()).Where("{{.PkColumn}} = ?", id).First(&update).Error; err != nil {
        return
    }

    //参数1:是要修改的数据
    //参数2:是修改的数据
    if err = orm.Eloquent.Table(e.TableName()).Model(&update).Updates(&e).Error; err != nil {
        return
    }
    return
}

// 删除{{.ClassName}}
func (e *{{.ClassName}}) Delete(id int) (success bool, err error) {
    if err = orm.Eloquent.Table(e.TableName()).Where("{{.PkColumn}} = ?", id).Delete(&{{.ClassName}}{}).Error; err != nil {
        success = false
        return
    }
    success = true
    return
}

//批量删除
func (e *{{.ClassName}}) BatchDelete(id []int) (Result bool, err error) {
    if err = orm.Eloquent.Table(e.TableName()).Where("{{.PkColumn}} in (?)", id).Delete(&{{.ClassName}}{}).Error; err != nil {
        return
    }
    Result = true
    return
}
